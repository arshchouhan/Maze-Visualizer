{"ast":null,"code":"var _jsxFileName = \"E:\\\\maze_analyser\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { breadthFirstSearch } from './algorithms/breadthFirstSearch';\nimport { generateMazeWithPrims } from './algorithms/primsAlgorithm';\nimport { generateMazeWithRecursiveDivision } from './algorithms/recursiveDivision';\nimport { PlayIcon, PuzzlePieceIcon, CubeIcon, ArrowPathIcon } from '@heroicons/react/24/solid';\nimport Matrix from './components/Matrix';\nimport InstructionsModal from './components/InstructionsModal';\nimport StatisticsModal from './components/StatisticsModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GRID_SIZE = 35;\nfunction App() {\n  _s();\n  // State management\n  const [startPos, setStartPos] = useState({\n    row: 2,\n    col: 2\n  });\n  const [targetPos, setTargetPos] = useState({\n    row: 32,\n    col: 32\n  });\n  const [walls, setWalls] = useState(new Set());\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [isDragging, setIsDragging] = useState(false); // Track if we're currently dragging a node\n  const [dragMode, setDragMode] = useState(null); // 'start', 'target', or null\n  const [algorithm, setAlgorithm] = useState('breadth-first');\n  const [mazeGenAlgorithm, setMazeGenAlgorithm] = useState('custom');\n\n  // Algorithm visualization states\n  const [isVisualizing, setIsVisualizing] = useState(false);\n  const [visitedCells, setVisitedCells] = useState(new Set());\n  const [pathCells, setPathCells] = useState(new Set());\n  const [algorithmStats, setAlgorithmStats] = useState({\n    visitedCount: 0,\n    pathLength: 0,\n    pathFound: false\n  });\n\n  // Maze generation states\n  const [isGeneratingMaze, setIsGeneratingMaze] = useState(false);\n  const [mazeGenerationCells, setMazeGenerationCells] = useState(new Set());\n  const [mazeGenerationStats, setMazeGenerationStats] = useState({\n    generationSteps: 0,\n    visitedCells: 0\n  });\n\n  // Modal states\n  const [showInstructions, setShowInstructions] = useState(false);\n  const [showStatistics, setShowStatistics] = useState(false);\n\n  // Show instructions modal on first load\n  useEffect(() => {\n    setShowInstructions(true);\n  }, []);\n  const handleCellClick = useCallback((row, col) => {\n    if (dragMode === 'start') {\n      setStartPos({\n        row,\n        col\n      });\n      setDragMode(null);\n    } else if (dragMode === 'target') {\n      setTargetPos({\n        row,\n        col\n      });\n      setDragMode(null);\n    } else if (row === startPos.row && col === startPos.col) {\n      // Clicked on start node\n      return;\n    } else if (row === targetPos.row && col === targetPos.col) {\n      // Clicked on target node\n      return;\n    } else {\n      // Toggle wall\n      const key = `${row}-${col}`;\n      setWalls(prev => {\n        const newWalls = new Set(prev);\n        if (newWalls.has(key)) {\n          newWalls.delete(key);\n        } else {\n          newWalls.add(key);\n        }\n        return newWalls;\n      });\n    }\n  }, [dragMode, startPos, targetPos]);\n  const handleMouseDown = useCallback((row, col) => {\n    // If we click on start node, initiate dragging for start node\n    if (row === startPos.row && col === startPos.col) {\n      setIsDragging(true);\n      setDragMode('start');\n      return;\n    }\n\n    // If we click on target node, initiate dragging for target node\n    if (row === targetPos.row && col === targetPos.col) {\n      setIsDragging(true);\n      setDragMode('target');\n      return;\n    }\n\n    // If we're not on a special node, proceed with wall drawing\n    if (!dragMode) {\n      setIsDrawing(true);\n\n      // Toggle wall status\n      const key = `${row}-${col}`;\n      setWalls(prev => {\n        const newWalls = new Set(prev);\n        if (newWalls.has(key)) {\n          newWalls.delete(key);\n        } else {\n          newWalls.add(key);\n        }\n        return newWalls;\n      });\n    }\n  }, [startPos, targetPos, dragMode]);\n  const handleMouseEnter = useCallback((row, col) => {\n    // If we're dragging a node, update its position\n    if (isDragging && dragMode === 'start') {\n      // Don't allow placing the start node on walls or the target\n      if (!walls.has(`${row}-${col}`) && (row !== targetPos.row || col !== targetPos.col)) {\n        setStartPos({\n          row,\n          col\n        });\n      }\n      return;\n    }\n    if (isDragging && dragMode === 'target') {\n      // Don't allow placing the target node on walls or the start\n      if (!walls.has(`${row}-${col}`) && (row !== startPos.row || col !== startPos.col)) {\n        setTargetPos({\n          row,\n          col\n        });\n      }\n      return;\n    }\n\n    // Handle wall drawing during mouse drag\n    if (isDrawing && row !== startPos.row && col !== startPos.col && row !== targetPos.row && col !== targetPos.col) {\n      const key = `${row}-${col}`;\n      setWalls(prev => {\n        const newWalls = new Set(prev);\n        newWalls.add(key);\n        return newWalls;\n      });\n    }\n  }, [isDrawing, startPos, targetPos, isDragging, dragMode, walls]);\n  const handleMouseUp = useCallback(() => {\n    setIsDrawing(false);\n\n    // End any dragging operations\n    if (isDragging) {\n      setIsDragging(false);\n      setDragMode(null);\n    }\n  }, [isDragging]);\n  const clearWalls = () => {\n    setWalls(new Set());\n  };\n\n  // Reset all visualization states\n  const resetVisualization = () => {\n    setVisitedCells(new Set());\n    setPathCells(new Set());\n    setMazeGenerationCells(new Set());\n    setAlgorithmStats({\n      visitedCount: 0,\n      pathLength: 0,\n      pathFound: false\n    });\n  };\n\n  // Run the selected pathfinding algorithm\n  const runAlgorithm = async () => {\n    // Reset previous visualization\n    resetVisualization();\n    setIsVisualizing(true);\n\n    // Callback to update visited cells with animation\n    const updateVisited = (row, col) => {\n      const cellKey = `${row}-${col}`;\n      setVisitedCells(prev => {\n        const newVisited = new Set(prev);\n        newVisited.add(cellKey);\n        return newVisited;\n      });\n    };\n\n    // Callback to update path cells with animation\n    const updatePath = (row, col) => {\n      const cellKey = `${row}-${col}`;\n      setPathCells(prev => {\n        const newPath = new Set(prev);\n        newPath.add(cellKey);\n        return newPath;\n      });\n    };\n\n    // Execute the BFS algorithm with visualization callbacks\n    const results = await breadthFirstSearch(GRID_SIZE, startPos, targetPos, walls, updateVisited, updatePath);\n\n    // Update stats with results\n    setAlgorithmStats({\n      visitedCount: results.visitedCount,\n      pathLength: results.pathLength,\n      pathFound: results.pathFound\n    });\n    setIsVisualizing(false);\n\n    // Show statistics modal after algorithm completes\n    setTimeout(() => {\n      setShowStatistics(true);\n    }, 500); // Small delay to let the final animation complete\n  };\n\n  // Generate maze using selected algorithm\n  const generateMaze = async () => {\n    if (isGeneratingMaze || isVisualizing) return;\n\n    // Reset previous states\n    resetVisualization();\n    setIsGeneratingMaze(true);\n    try {\n      if (mazeGenAlgorithm === 'prims') {\n        // Callback to update walls during generation\n        const updateWalls = newWalls => {\n          setWalls(newWalls);\n        };\n\n        // Callback to update maze generation cells with distinct orange color\n        const updateMazeGeneration = newMazeGenCells => {\n          setMazeGenerationCells(newMazeGenCells);\n        };\n\n        // Generate maze with Prim's algorithm\n        const results = await generateMazeWithPrims(GRID_SIZE, updateWalls, updateMazeGeneration, 150 // Animation speed in milliseconds\n        );\n\n        // Update maze generation stats\n        setMazeGenerationStats({\n          generationSteps: results.generationSteps,\n          visitedCells: results.visitedCells\n        });\n      } else if (mazeGenAlgorithm === 'recursive') {\n        // Callback to update walls during generation\n        const updateWalls = newWalls => {\n          setWalls(newWalls);\n        };\n\n        // Callback to update maze generation cells with distinct orange color\n        const updateMazeGeneration = newMazeGenCells => {\n          setMazeGenerationCells(newMazeGenCells);\n        };\n\n        // Generate maze with Recursive Division algorithm\n        const results = await generateMazeWithRecursiveDivision(GRID_SIZE, updateWalls, updateMazeGeneration, 120 // Animation speed in milliseconds (elegant timing like Prim's)\n        );\n\n        // Update maze generation stats\n        setMazeGenerationStats({\n          generationSteps: results.generationSteps,\n          visitedCells: results.visitedCells\n        });\n      } else if (mazeGenAlgorithm === 'random') {\n        // Simple random maze generation\n        const newWalls = new Set();\n        for (let row = 0; row < GRID_SIZE; row++) {\n          for (let col = 0; col < GRID_SIZE; col++) {\n            // Don't place walls on start or target positions\n            if (row === startPos.row && col === startPos.col || row === targetPos.row && col === targetPos.col) {\n              continue;\n            }\n            // 30% chance of wall\n            if (Math.random() < 0.3) {\n              newWalls.add(`${row}-${col}`);\n            }\n          }\n        }\n        setWalls(newWalls);\n      }\n    } catch (error) {\n      console.error('Error generating maze:', error);\n    } finally {\n      setIsGeneratingMaze(false);\n    }\n  };\n  const resetGrid = () => {\n    setWalls(new Set());\n    setStartPos({\n      row: 2,\n      col: 2\n    });\n    setTargetPos({\n      row: 17,\n      col: 17\n    });\n    setDragMode(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-100 flex\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-64 bg-gray-600 p-4 flex flex-col\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-6\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-white text-lg font-semibold mb-2\",\n          children: \"Settings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-4 flex-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-white text-sm mb-2\",\n            children: \"Maze solving algorithm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: algorithm,\n            onChange: e => setAlgorithm(e.target.value),\n            className: \"w-full bg-gray-500 text-white py-2 px-3 rounded cursor-pointer\",\n            disabled: isVisualizing,\n            children: /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"breadth-first\",\n              children: \"Breadth-First\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-white text-sm mb-2\",\n            children: \"Maze generation algorithm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: mazeGenAlgorithm,\n            onChange: e => setMazeGenAlgorithm(e.target.value),\n            className: \"w-full bg-gray-500 text-white py-2 px-3 rounded cursor-pointer\",\n            disabled: isVisualizing,\n            children: /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"custom\",\n              children: \"Custom\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"space-y-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: clearWalls,\n            className: \"w-full py-2 px-4 bg-gray-500 hover:bg-gray-400 text-white rounded transition-colors\",\n            children: \"Clear\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `w-full py-2 px-4 ${isVisualizing ? 'bg-gray-400 cursor-not-allowed' : 'bg-green-500 hover:bg-green-600'} text-white rounded transition-colors`,\n            onClick: runAlgorithm,\n            disabled: isVisualizing,\n            children: isVisualizing ? 'Running...' : 'Play'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 p-4\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full h-full flex items-center justify-center\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white rounded-lg shadow-lg\",\n          style: {\n            width: 'min(calc(100vh - 100px), calc(100vw - 300px))',\n            height: 'min(calc(100vh - 100px), calc(100vw - 300px))',\n            aspectRatio: '1 / 1'\n          },\n          children: /*#__PURE__*/_jsxDEV(Matrix, {\n            gridSize: GRID_SIZE,\n            startPos: startPos,\n            targetPos: targetPos,\n            walls: walls,\n            onCellClick: handleCellClick,\n            onMouseDown: handleMouseDown,\n            onMouseEnter: handleMouseEnter,\n            onMouseUp: handleMouseUp,\n            dragMode: dragMode,\n            visitedCells: visitedCells,\n            pathCells: pathCells,\n            mazeGenerationCells: mazeGenerationCells,\n            isVisualizing: isVisualizing\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InstructionsModal, {\n      isOpen: showInstructions,\n      onClose: () => setShowInstructions(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StatisticsModal, {\n      isOpen: showStatistics,\n      onClose: () => setShowStatistics(false),\n      stats: algorithmStats,\n      algorithmType: algorithm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 316,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"W1BBnNoKO4F99q0hmeAtEheFfNI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","breadthFirstSearch","generateMazeWithPrims","generateMazeWithRecursiveDivision","PlayIcon","PuzzlePieceIcon","CubeIcon","ArrowPathIcon","Matrix","InstructionsModal","StatisticsModal","jsxDEV","_jsxDEV","GRID_SIZE","App","_s","startPos","setStartPos","row","col","targetPos","setTargetPos","walls","setWalls","Set","isDrawing","setIsDrawing","isDragging","setIsDragging","dragMode","setDragMode","algorithm","setAlgorithm","mazeGenAlgorithm","setMazeGenAlgorithm","isVisualizing","setIsVisualizing","visitedCells","setVisitedCells","pathCells","setPathCells","algorithmStats","setAlgorithmStats","visitedCount","pathLength","pathFound","isGeneratingMaze","setIsGeneratingMaze","mazeGenerationCells","setMazeGenerationCells","mazeGenerationStats","setMazeGenerationStats","generationSteps","showInstructions","setShowInstructions","showStatistics","setShowStatistics","handleCellClick","key","prev","newWalls","has","delete","add","handleMouseDown","handleMouseEnter","handleMouseUp","clearWalls","resetVisualization","runAlgorithm","updateVisited","cellKey","newVisited","updatePath","newPath","results","setTimeout","generateMaze","updateWalls","updateMazeGeneration","newMazeGenCells","Math","random","error","console","resetGrid","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","disabled","onClick","style","width","height","aspectRatio","gridSize","onCellClick","onMouseDown","onMouseEnter","onMouseUp","isOpen","onClose","stats","algorithmType","_c","$RefreshReg$"],"sources":["E:/maze_analyser/src/App.js"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport { breadthFirstSearch } from './algorithms/breadthFirstSearch';\nimport { generateMazeWithPrims } from './algorithms/primsAlgorithm';\nimport { generateMazeWithRecursiveDivision } from './algorithms/recursiveDivision';\nimport { \n  PlayIcon, \n  PuzzlePieceIcon,\n  CubeIcon,\n  ArrowPathIcon\n} from '@heroicons/react/24/solid';\nimport Matrix from './components/Matrix';\nimport InstructionsModal from './components/InstructionsModal';\nimport StatisticsModal from './components/StatisticsModal';\n\nconst GRID_SIZE = 35;\n\nfunction App() {\n  // State management\n  const [startPos, setStartPos] = useState({ row: 2, col: 2 });\n  const [targetPos, setTargetPos] = useState({ row: 32, col: 32 });\n  const [walls, setWalls] = useState(new Set());\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [isDragging, setIsDragging] = useState(false); // Track if we're currently dragging a node\n  const [dragMode, setDragMode] = useState(null); // 'start', 'target', or null\n  const [algorithm, setAlgorithm] = useState('breadth-first');\n  const [mazeGenAlgorithm, setMazeGenAlgorithm] = useState('custom');\n\n  // Algorithm visualization states\n  const [isVisualizing, setIsVisualizing] = useState(false);\n  const [visitedCells, setVisitedCells] = useState(new Set());\n  const [pathCells, setPathCells] = useState(new Set());\n  const [algorithmStats, setAlgorithmStats] = useState({\n    visitedCount: 0,\n    pathLength: 0,\n    pathFound: false\n  });\n\n  // Maze generation states\n  const [isGeneratingMaze, setIsGeneratingMaze] = useState(false);\n  const [mazeGenerationCells, setMazeGenerationCells] = useState(new Set());\n  const [mazeGenerationStats, setMazeGenerationStats] = useState({\n    generationSteps: 0,\n    visitedCells: 0\n  });\n\n  // Modal states\n  const [showInstructions, setShowInstructions] = useState(false);\n  const [showStatistics, setShowStatistics] = useState(false);\n\n  // Show instructions modal on first load\n  useEffect(() => {\n    setShowInstructions(true);\n  }, []);\n\n  const handleCellClick = useCallback((row, col) => {\n    if (dragMode === 'start') {\n      setStartPos({ row, col });\n      setDragMode(null);\n    } else if (dragMode === 'target') {\n      setTargetPos({ row, col });\n      setDragMode(null);\n    } else if (row === startPos.row && col === startPos.col) {\n      // Clicked on start node\n      return;\n    } else if (row === targetPos.row && col === targetPos.col) {\n      // Clicked on target node\n      return;\n    } else {\n      // Toggle wall\n      const key = `${row}-${col}`;\n      setWalls(prev => {\n        const newWalls = new Set(prev);\n        if (newWalls.has(key)) {\n          newWalls.delete(key);\n        } else {\n          newWalls.add(key);\n        }\n        return newWalls;\n      });\n    }\n  }, [dragMode, startPos, targetPos]);\n\n  const handleMouseDown = useCallback((row, col) => {\n    // If we click on start node, initiate dragging for start node\n    if (row === startPos.row && col === startPos.col) {\n      setIsDragging(true);\n      setDragMode('start');\n      return;\n    }\n    \n    // If we click on target node, initiate dragging for target node\n    if (row === targetPos.row && col === targetPos.col) {\n      setIsDragging(true);\n      setDragMode('target');\n      return;\n    }\n    \n    // If we're not on a special node, proceed with wall drawing\n    if (!dragMode) {\n      setIsDrawing(true);\n      \n      // Toggle wall status\n      const key = `${row}-${col}`;\n      setWalls(prev => {\n        const newWalls = new Set(prev);\n        if (newWalls.has(key)) {\n          newWalls.delete(key);\n        } else {\n          newWalls.add(key);\n        }\n        return newWalls;\n      });\n    }\n  }, [startPos, targetPos, dragMode]);\n\n\n  const handleMouseEnter = useCallback((row, col) => {\n    // If we're dragging a node, update its position\n    if (isDragging && dragMode === 'start') {\n      // Don't allow placing the start node on walls or the target\n      if (!walls.has(`${row}-${col}`) && (row !== targetPos.row || col !== targetPos.col)) {\n        setStartPos({ row, col });\n      }\n      return;\n    }\n    \n    if (isDragging && dragMode === 'target') {\n      // Don't allow placing the target node on walls or the start\n      if (!walls.has(`${row}-${col}`) && (row !== startPos.row || col !== startPos.col)) {\n        setTargetPos({ row, col });\n      }\n      return;\n    }\n    \n    // Handle wall drawing during mouse drag\n    if (isDrawing && row !== startPos.row && col !== startPos.col && \n        row !== targetPos.row && col !== targetPos.col) {\n      const key = `${row}-${col}`;\n      setWalls(prev => {\n        const newWalls = new Set(prev);\n        newWalls.add(key);\n        return newWalls;\n      });\n    }\n  }, [isDrawing, startPos, targetPos, isDragging, dragMode, walls]);\n\n  const handleMouseUp = useCallback(() => {\n    setIsDrawing(false);\n    \n    // End any dragging operations\n    if (isDragging) {\n      setIsDragging(false);\n      setDragMode(null);\n    }\n  }, [isDragging]);\n\n  const clearWalls = () => {\n    setWalls(new Set());\n  };\n  \n  // Reset all visualization states\n  const resetVisualization = () => {\n    setVisitedCells(new Set());\n    setPathCells(new Set());\n    setMazeGenerationCells(new Set());\n    setAlgorithmStats({\n      visitedCount: 0,\n      pathLength: 0,\n      pathFound: false\n    });\n  };\n  \n  // Run the selected pathfinding algorithm\n  const runAlgorithm = async () => {\n    // Reset previous visualization\n    resetVisualization();\n    setIsVisualizing(true);\n    \n    // Callback to update visited cells with animation\n    const updateVisited = (row, col) => {\n      const cellKey = `${row}-${col}`;\n      setVisitedCells(prev => {\n        const newVisited = new Set(prev);\n        newVisited.add(cellKey);\n        return newVisited;\n      });\n    };\n    \n    // Callback to update path cells with animation\n    const updatePath = (row, col) => {\n      const cellKey = `${row}-${col}`;\n      setPathCells(prev => {\n        const newPath = new Set(prev);\n        newPath.add(cellKey);\n        return newPath;\n      });\n    };\n    \n    // Execute the BFS algorithm with visualization callbacks\n    const results = await breadthFirstSearch(\n      GRID_SIZE,\n      startPos,\n      targetPos,\n      walls,\n      updateVisited,\n      updatePath\n    );\n    \n    // Update stats with results\n    setAlgorithmStats({\n      visitedCount: results.visitedCount,\n      pathLength: results.pathLength,\n      pathFound: results.pathFound\n    });\n    \n    setIsVisualizing(false);\n    \n    // Show statistics modal after algorithm completes\n    setTimeout(() => {\n      setShowStatistics(true);\n    }, 500); // Small delay to let the final animation complete\n  };\n\n  // Generate maze using selected algorithm\n  const generateMaze = async () => {\n    if (isGeneratingMaze || isVisualizing) return;\n    \n    // Reset previous states\n    resetVisualization();\n    setIsGeneratingMaze(true);\n    \n    try {\n      if (mazeGenAlgorithm === 'prims') {\n        // Callback to update walls during generation\n        const updateWalls = (newWalls) => {\n          setWalls(newWalls);\n        };\n        \n        // Callback to update maze generation cells with distinct orange color\n        const updateMazeGeneration = (newMazeGenCells) => {\n          setMazeGenerationCells(newMazeGenCells);\n        };\n        \n        // Generate maze with Prim's algorithm\n        const results = await generateMazeWithPrims(\n          GRID_SIZE,\n          updateWalls,\n          updateMazeGeneration,\n          150 // Animation speed in milliseconds\n        );\n        \n        // Update maze generation stats\n        setMazeGenerationStats({\n          generationSteps: results.generationSteps,\n          visitedCells: results.visitedCells\n        });\n        \n      } else if (mazeGenAlgorithm === 'recursive') {\n        // Callback to update walls during generation\n        const updateWalls = (newWalls) => {\n          setWalls(newWalls);\n        };\n        \n        // Callback to update maze generation cells with distinct orange color\n        const updateMazeGeneration = (newMazeGenCells) => {\n          setMazeGenerationCells(newMazeGenCells);\n        };\n        \n        // Generate maze with Recursive Division algorithm\n        const results = await generateMazeWithRecursiveDivision(\n          GRID_SIZE,\n          updateWalls,\n          updateMazeGeneration,\n          120 // Animation speed in milliseconds (elegant timing like Prim's)\n        );\n        \n        // Update maze generation stats\n        setMazeGenerationStats({\n          generationSteps: results.generationSteps,\n          visitedCells: results.visitedCells\n        });\n        \n      } else if (mazeGenAlgorithm === 'random') {\n        // Simple random maze generation\n        const newWalls = new Set();\n        for (let row = 0; row < GRID_SIZE; row++) {\n          for (let col = 0; col < GRID_SIZE; col++) {\n            // Don't place walls on start or target positions\n            if ((row === startPos.row && col === startPos.col) ||\n                (row === targetPos.row && col === targetPos.col)) {\n              continue;\n            }\n            // 30% chance of wall\n            if (Math.random() < 0.3) {\n              newWalls.add(`${row}-${col}`);\n            }\n          }\n        }\n        setWalls(newWalls);\n      }\n    } catch (error) {\n      console.error('Error generating maze:', error);\n    } finally {\n      setIsGeneratingMaze(false);\n    }\n  };\n\n  const resetGrid = () => {\n    setWalls(new Set());\n    setStartPos({ row: 2, col: 2 });\n    setTargetPos({ row: 17, col: 17 });\n    setDragMode(null);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 flex\">\n      {/* Left Sidebar - Settings */}\n      <div className=\"w-64 bg-gray-600 p-4 flex flex-col\">\n        <div className=\"mb-6\">\n          <h1 className=\"text-white text-lg font-semibold mb-2\">Settings</h1>\n        </div>\n        \n        <div className=\"space-y-4 flex-1\">\n          <div>\n            <label className=\"block text-white text-sm mb-2\">Maze solving algorithm</label>\n            <select \n              value={algorithm}\n              onChange={(e) => setAlgorithm(e.target.value)}\n              className=\"w-full bg-gray-500 text-white py-2 px-3 rounded cursor-pointer\"\n              disabled={isVisualizing}\n            >\n              <option value=\"breadth-first\">Breadth-First</option>\n            </select>\n          </div>\n          \n          <div>\n            <label className=\"block text-white text-sm mb-2\">Maze generation algorithm</label>\n            <select \n              value={mazeGenAlgorithm}\n              onChange={(e) => setMazeGenAlgorithm(e.target.value)}\n              className=\"w-full bg-gray-500 text-white py-2 px-3 rounded cursor-pointer\"\n              disabled={isVisualizing}\n            >\n              <option value=\"custom\">Custom</option>\n            </select>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <button \n              onClick={clearWalls}\n              className=\"w-full py-2 px-4 bg-gray-500 hover:bg-gray-400 text-white rounded transition-colors\"\n            >\n              Clear\n            </button>\n            \n            <button \n              className={`w-full py-2 px-4 ${isVisualizing ? 'bg-gray-400 cursor-not-allowed' : 'bg-green-500 hover:bg-green-600'} text-white rounded transition-colors`}\n              onClick={runAlgorithm}\n              disabled={isVisualizing}\n            >\n              {isVisualizing ? 'Running...' : 'Play'}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content Area */}\n      <div className=\"flex-1 p-4\">\n        <div className=\"w-full h-full flex items-center justify-center\">\n          <div className=\"bg-white rounded-lg shadow-lg\" style={{ width: 'min(calc(100vh - 100px), calc(100vw - 300px))', height: 'min(calc(100vh - 100px), calc(100vw - 300px))', aspectRatio: '1 / 1' }}>\n            <Matrix \n              gridSize={GRID_SIZE}\n              startPos={startPos}\n              targetPos={targetPos}\n              walls={walls}\n              onCellClick={handleCellClick}\n              onMouseDown={handleMouseDown}\n              onMouseEnter={handleMouseEnter}\n              onMouseUp={handleMouseUp}\n              dragMode={dragMode}\n              visitedCells={visitedCells}\n              pathCells={pathCells}\n              mazeGenerationCells={mazeGenerationCells}\n              isVisualizing={isVisualizing}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Modals */}\n      <InstructionsModal \n        isOpen={showInstructions} \n        onClose={() => setShowInstructions(false)} \n      />\n      \n      <StatisticsModal \n        isOpen={showStatistics} \n        onClose={() => setShowStatistics(false)}\n        stats={algorithmStats}\n        algorithmType={algorithm}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}