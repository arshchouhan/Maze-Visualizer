{"ast":null,"code":"/**\n * Recursive Division Algorithm for Maze Generation\n * \n * This algorithm generates a maze by starting with an empty space and \n * recursively dividing it with walls, leaving passages through each wall.\n * \n * Data Structures Used:\n * - Set: For tracking walls and division cells\n * - Array: For managing division operations and animation steps\n * - Recursive function calls: For the division process\n */\n\n/**\n * Generates a maze using Recursive Division algorithm with systematic grid-like animation\n * @param {number} gridSize - The size of the grid (gridSize x gridSize)\n * @param {Function} updateWalls - Callback to update UI with current walls\n * @param {Function} updateMazeGeneration - Callback to update UI with maze generation cells\n * @param {number} animationSpeed - Speed of animation in milliseconds\n * @returns {Object} - Results including final walls set and generation stats\n */\nexport const generateMazeWithRecursiveDivision = async (gridSize, updateWalls, updateMazeGeneration, animationSpeed = 120) => {\n  const walls = new Set();\n  const mazeGenerationCells = new Set();\n  let generationSteps = 0;\n\n  // Initialize: Start with border walls only\n  for (let row = 0; row < gridSize; row++) {\n    for (let col = 0; col < gridSize; col++) {\n      // Only create border walls initially\n      if (row === 0 || row === gridSize - 1 || col === 0 || col === gridSize - 1) {\n        walls.add(`${row}-${col}`);\n      }\n    }\n  }\n\n  // Update initial state (empty interior with border walls)\n  updateWalls(new Set(walls));\n  updateMazeGeneration(new Set());\n  await sleep(animationSpeed);\n\n  // Start classic recursive division on the entire interior space\n  await recursiveDivide(1, 1,\n  // top-left of interior\n  gridSize - 2, gridSize - 2,\n  // width and height of interior\n  true,\n  // start with horizontal division\n  walls, mazeGenerationCells, updateWalls, updateMazeGeneration, animationSpeed, () => {\n    generationSteps++;\n  });\n\n  // Clear maze generation cells after completion\n  setTimeout(() => {\n    updateMazeGeneration(new Set());\n  }, 1500);\n  return {\n    walls: new Set(walls),\n    generationSteps,\n    visitedCells: gridSize * gridSize - walls.size\n  };\n};\n\n/**\n * Classic Recursive Division Algorithm\n * Recursively divides areas with alternating horizontal and vertical walls\n * @param {number} x - Left boundary of the area\n * @param {number} y - Top boundary of the area\n * @param {number} width - Width of the area\n * @param {number} height - Height of the area\n * @param {boolean} horizontal - Whether to divide horizontally (true) or vertically (false)\n * @param {Set} walls - Current walls set\n * @param {Set} mazeGenerationCells - Cells being processed\n * @param {Function} updateWalls - Callback to update walls\n * @param {Function} updateMazeGeneration - Callback to update generation cells\n * @param {number} animationSpeed - Animation delay\n * @param {Function} incrementSteps - Callback to increment step counter\n */\nasync function recursiveDivide(x, y, width, height, horizontal, walls, mazeGenerationCells, updateWalls, updateMazeGeneration, animationSpeed, incrementSteps) {\n  // Base case: area too small to divide\n  if (width < 2 || height < 2) {\n    return;\n  }\n  if (horizontal) {\n    // Divide horizontally\n    if (height < 3) return; // Need at least 3 cells to divide horizontally\n\n    // Choose a random row to place the wall (avoid edges)\n    const wallY = y + 1 + Math.floor(Math.random() * (height - 2));\n\n    // Choose a random position for the passage\n    const passageX = x + Math.floor(Math.random() * width);\n\n    // Create horizontal wall with passage\n    await createHorizontalWall(x, wallY, width, passageX, walls, mazeGenerationCells, updateWalls, updateMazeGeneration, animationSpeed, incrementSteps);\n\n    // Recursively divide the two new areas (switch to vertical)\n    await recursiveDivide(x, y, width, wallY - y, false,\n    // top area, switch to vertical\n    walls, mazeGenerationCells, updateWalls, updateMazeGeneration, animationSpeed, incrementSteps);\n    await recursiveDivide(x, wallY + 1, width, height - (wallY - y + 1), false,\n    // bottom area, switch to vertical\n    walls, mazeGenerationCells, updateWalls, updateMazeGeneration, animationSpeed, incrementSteps);\n  } else {\n    // Divide vertically\n    if (width < 3) return; // Need at least 3 cells to divide vertically\n\n    // Choose a random column to place the wall (avoid edges)\n    const wallX = x + 1 + Math.floor(Math.random() * (width - 2));\n\n    // Choose a random position for the passage\n    const passageY = y + Math.floor(Math.random() * height);\n\n    // Create vertical wall with passage\n    await createVerticalWall(wallX, y, height, passageY, walls, mazeGenerationCells, updateWalls, updateMazeGeneration, animationSpeed, incrementSteps);\n\n    // Recursively divide the two new areas (switch to horizontal)\n    await recursiveDivide(x, y, wallX - x, height, true,\n    // left area, switch to horizontal\n    walls, mazeGenerationCells, updateWalls, updateMazeGeneration, animationSpeed, incrementSteps);\n    await recursiveDivide(wallX + 1, y, width - (wallX - x + 1), height, true,\n    // right area, switch to horizontal\n    walls, mazeGenerationCells, updateWalls, updateMazeGeneration, animationSpeed, incrementSteps);\n  }\n}\n\n/**\n * Create a vertical wall from top to bottom with a random passage\n */\nasync function createVerticalWall(wallCol, startRow, height, walls, mazeGenerationCells, updateWalls, updateMazeGeneration, animationSpeed, incrementSteps) {\n  // Choose a random position for the passage\n  const passageRow = startRow + Math.floor(Math.random() * height);\n\n  // Add vertical wall with passage\n  const newWallCells = [];\n  for (let row = startRow; row < startRow + height; row++) {\n    if (row !== passageRow) {\n      const cellKey = `${row}-${wallCol}`;\n      walls.add(cellKey);\n      mazeGenerationCells.add(cellKey);\n      newWallCells.push(cellKey);\n    }\n  }\n\n  // Animate the wall creation\n  incrementSteps();\n  updateWalls(new Set(walls));\n  updateMazeGeneration(new Set(mazeGenerationCells));\n  await sleep(animationSpeed);\n\n  // Remove the wall cells from generation display after a short delay\n  setTimeout(() => {\n    newWallCells.forEach(cell => mazeGenerationCells.delete(cell));\n    updateMazeGeneration(new Set(mazeGenerationCells));\n  }, animationSpeed * 2);\n}\n\n/**\n * Fill a section with horizontal divisions\n */\nasync function fillSectionWithHorizontalDivisions(section, walls, mazeGenerationCells, updateWalls, updateMazeGeneration, animationSpeed, incrementSteps) {\n  const sectionWidth = section.endCol - section.startCol + 1;\n  const sectionHeight = section.endRow - section.startRow + 1;\n\n  // Only add horizontal divisions if section is large enough\n  if (sectionHeight < 4 || sectionWidth < 2) {\n    return;\n  }\n\n  // Create 1-2 horizontal divisions in this section\n  const numHorizontalDivisions = Math.floor(sectionHeight / 6) || 1;\n  for (let i = 1; i <= numHorizontalDivisions; i++) {\n    const wallRow = section.startRow + i * Math.floor(sectionHeight / (numHorizontalDivisions + 1));\n\n    // Skip if wall would be too close to boundaries\n    if (wallRow <= section.startRow + 1 || wallRow >= section.endRow - 1) {\n      continue;\n    }\n\n    // Choose a random position for the passage\n    const passageCol = section.startCol + Math.floor(Math.random() * sectionWidth);\n\n    // Add horizontal wall with passage\n    const newWallCells = [];\n    for (let col = section.startCol; col <= section.endCol; col++) {\n      if (col !== passageCol) {\n        const cellKey = `${wallRow}-${col}`;\n        walls.add(cellKey);\n        mazeGenerationCells.add(cellKey);\n        newWallCells.push(cellKey);\n      }\n    }\n\n    // Animate the wall creation\n    incrementSteps();\n    updateWalls(new Set(walls));\n    updateMazeGeneration(new Set(mazeGenerationCells));\n    await sleep(animationSpeed);\n\n    // Remove the wall cells from generation display after a short delay\n    setTimeout(() => {\n      newWallCells.forEach(cell => mazeGenerationCells.delete(cell));\n      updateMazeGeneration(new Set(mazeGenerationCells));\n    }, animationSpeed * 2);\n  }\n}\n\n/**\n * Sleep function for animation delays\n */\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Generate maze steps for step-by-step visualization (simplified version)\n */\nexport const getRecursiveDivisionSteps = gridSize => {\n  const steps = [];\n  const walls = new Set();\n\n  // Initialize with border walls\n  for (let row = 0; row < gridSize; row++) {\n    for (let col = 0; col < gridSize; col++) {\n      if (row === 0 || row === gridSize - 1 || col === 0 || col === gridSize - 1) {\n        walls.add(`${row}-${col}`);\n      }\n    }\n  }\n  steps.push({\n    walls: new Set(walls),\n    action: 'start',\n    description: 'Starting with border walls only'\n  });\n\n  // This would contain the recursive division steps\n  // For now, return the initial step\n  return steps;\n};\nexport default generateMazeWithRecursiveDivision;","map":{"version":3,"names":["generateMazeWithRecursiveDivision","gridSize","updateWalls","updateMazeGeneration","animationSpeed","walls","Set","mazeGenerationCells","generationSteps","row","col","add","sleep","recursiveDivide","setTimeout","visitedCells","size","x","y","width","height","horizontal","incrementSteps","wallY","Math","floor","random","passageX","createHorizontalWall","wallX","passageY","createVerticalWall","wallCol","startRow","passageRow","newWallCells","cellKey","push","forEach","cell","delete","fillSectionWithHorizontalDivisions","section","sectionWidth","endCol","startCol","sectionHeight","endRow","numHorizontalDivisions","i","wallRow","passageCol","ms","Promise","resolve","getRecursiveDivisionSteps","steps","action","description"],"sources":["E:/maze_analyser/src/algorithms/recursiveDivision.js"],"sourcesContent":["/**\n * Recursive Division Algorithm for Maze Generation\n * \n * This algorithm generates a maze by starting with an empty space and \n * recursively dividing it with walls, leaving passages through each wall.\n * \n * Data Structures Used:\n * - Set: For tracking walls and division cells\n * - Array: For managing division operations and animation steps\n * - Recursive function calls: For the division process\n */\n\n/**\n * Generates a maze using Recursive Division algorithm with systematic grid-like animation\n * @param {number} gridSize - The size of the grid (gridSize x gridSize)\n * @param {Function} updateWalls - Callback to update UI with current walls\n * @param {Function} updateMazeGeneration - Callback to update UI with maze generation cells\n * @param {number} animationSpeed - Speed of animation in milliseconds\n * @returns {Object} - Results including final walls set and generation stats\n */\nexport const generateMazeWithRecursiveDivision = async (\n  gridSize,\n  updateWalls,\n  updateMazeGeneration,\n  animationSpeed = 120\n) => {\n  const walls = new Set();\n  const mazeGenerationCells = new Set();\n  let generationSteps = 0;\n  \n  // Initialize: Start with border walls only\n  for (let row = 0; row < gridSize; row++) {\n    for (let col = 0; col < gridSize; col++) {\n      // Only create border walls initially\n      if (row === 0 || row === gridSize - 1 || col === 0 || col === gridSize - 1) {\n        walls.add(`${row}-${col}`);\n      }\n    }\n  }\n  \n  // Update initial state (empty interior with border walls)\n  updateWalls(new Set(walls));\n  updateMazeGeneration(new Set());\n  await sleep(animationSpeed);\n  \n  // Start classic recursive division on the entire interior space\n  await recursiveDivide(\n    1, 1, // top-left of interior\n    gridSize - 2, gridSize - 2, // width and height of interior\n    true, // start with horizontal division\n    walls,\n    mazeGenerationCells,\n    updateWalls,\n    updateMazeGeneration,\n    animationSpeed,\n    () => { generationSteps++; }\n  );\n  \n  // Clear maze generation cells after completion\n  setTimeout(() => {\n    updateMazeGeneration(new Set());\n  }, 1500);\n  \n  return {\n    walls: new Set(walls),\n    generationSteps,\n    visitedCells: gridSize * gridSize - walls.size\n  };\n};\n\n/**\n * Classic Recursive Division Algorithm\n * Recursively divides areas with alternating horizontal and vertical walls\n * @param {number} x - Left boundary of the area\n * @param {number} y - Top boundary of the area\n * @param {number} width - Width of the area\n * @param {number} height - Height of the area\n * @param {boolean} horizontal - Whether to divide horizontally (true) or vertically (false)\n * @param {Set} walls - Current walls set\n * @param {Set} mazeGenerationCells - Cells being processed\n * @param {Function} updateWalls - Callback to update walls\n * @param {Function} updateMazeGeneration - Callback to update generation cells\n * @param {number} animationSpeed - Animation delay\n * @param {Function} incrementSteps - Callback to increment step counter\n */\nasync function recursiveDivide(\n  x, y, width, height, horizontal,\n  walls, mazeGenerationCells,\n  updateWalls, updateMazeGeneration,\n  animationSpeed, incrementSteps\n) {\n  // Base case: area too small to divide\n  if (width < 2 || height < 2) {\n    return;\n  }\n  \n  if (horizontal) {\n    // Divide horizontally\n    if (height < 3) return; // Need at least 3 cells to divide horizontally\n    \n    // Choose a random row to place the wall (avoid edges)\n    const wallY = y + 1 + Math.floor(Math.random() * (height - 2));\n    \n    // Choose a random position for the passage\n    const passageX = x + Math.floor(Math.random() * width);\n    \n    // Create horizontal wall with passage\n    await createHorizontalWall(\n      x, wallY, width, passageX,\n      walls, mazeGenerationCells,\n      updateWalls, updateMazeGeneration,\n      animationSpeed, incrementSteps\n    );\n    \n    // Recursively divide the two new areas (switch to vertical)\n    await recursiveDivide(\n      x, y, width, wallY - y, false, // top area, switch to vertical\n      walls, mazeGenerationCells,\n      updateWalls, updateMazeGeneration,\n      animationSpeed, incrementSteps\n    );\n    \n    await recursiveDivide(\n      x, wallY + 1, width, height - (wallY - y + 1), false, // bottom area, switch to vertical\n      walls, mazeGenerationCells,\n      updateWalls, updateMazeGeneration,\n      animationSpeed, incrementSteps\n    );\n    \n  } else {\n    // Divide vertically\n    if (width < 3) return; // Need at least 3 cells to divide vertically\n    \n    // Choose a random column to place the wall (avoid edges)\n    const wallX = x + 1 + Math.floor(Math.random() * (width - 2));\n    \n    // Choose a random position for the passage\n    const passageY = y + Math.floor(Math.random() * height);\n    \n    // Create vertical wall with passage\n    await createVerticalWall(\n      wallX, y, height, passageY,\n      walls, mazeGenerationCells,\n      updateWalls, updateMazeGeneration,\n      animationSpeed, incrementSteps\n    );\n    \n    // Recursively divide the two new areas (switch to horizontal)\n    await recursiveDivide(\n      x, y, wallX - x, height, true, // left area, switch to horizontal\n      walls, mazeGenerationCells,\n      updateWalls, updateMazeGeneration,\n      animationSpeed, incrementSteps\n    );\n    \n    await recursiveDivide(\n      wallX + 1, y, width - (wallX - x + 1), height, true, // right area, switch to horizontal\n      walls, mazeGenerationCells,\n      updateWalls, updateMazeGeneration,\n      animationSpeed, incrementSteps\n    );\n  }\n}\n\n/**\n * Create a vertical wall from top to bottom with a random passage\n */\nasync function createVerticalWall(\n  wallCol, startRow, height,\n  walls, mazeGenerationCells,\n  updateWalls, updateMazeGeneration,\n  animationSpeed, incrementSteps\n) {\n  // Choose a random position for the passage\n  const passageRow = startRow + Math.floor(Math.random() * height);\n  \n  // Add vertical wall with passage\n  const newWallCells = [];\n  for (let row = startRow; row < startRow + height; row++) {\n    if (row !== passageRow) {\n      const cellKey = `${row}-${wallCol}`;\n      walls.add(cellKey);\n      mazeGenerationCells.add(cellKey);\n      newWallCells.push(cellKey);\n    }\n  }\n  \n  // Animate the wall creation\n  incrementSteps();\n  updateWalls(new Set(walls));\n  updateMazeGeneration(new Set(mazeGenerationCells));\n  await sleep(animationSpeed);\n  \n  // Remove the wall cells from generation display after a short delay\n  setTimeout(() => {\n    newWallCells.forEach(cell => mazeGenerationCells.delete(cell));\n    updateMazeGeneration(new Set(mazeGenerationCells));\n  }, animationSpeed * 2);\n}\n\n/**\n * Fill a section with horizontal divisions\n */\nasync function fillSectionWithHorizontalDivisions(\n  section,\n  walls, mazeGenerationCells,\n  updateWalls, updateMazeGeneration,\n  animationSpeed, incrementSteps\n) {\n  const sectionWidth = section.endCol - section.startCol + 1;\n  const sectionHeight = section.endRow - section.startRow + 1;\n  \n  // Only add horizontal divisions if section is large enough\n  if (sectionHeight < 4 || sectionWidth < 2) {\n    return;\n  }\n  \n  // Create 1-2 horizontal divisions in this section\n  const numHorizontalDivisions = Math.floor(sectionHeight / 6) || 1;\n  \n  for (let i = 1; i <= numHorizontalDivisions; i++) {\n    const wallRow = section.startRow + (i * Math.floor(sectionHeight / (numHorizontalDivisions + 1)));\n    \n    // Skip if wall would be too close to boundaries\n    if (wallRow <= section.startRow + 1 || wallRow >= section.endRow - 1) {\n      continue;\n    }\n    \n    // Choose a random position for the passage\n    const passageCol = section.startCol + Math.floor(Math.random() * sectionWidth);\n    \n    // Add horizontal wall with passage\n    const newWallCells = [];\n    for (let col = section.startCol; col <= section.endCol; col++) {\n      if (col !== passageCol) {\n        const cellKey = `${wallRow}-${col}`;\n        walls.add(cellKey);\n        mazeGenerationCells.add(cellKey);\n        newWallCells.push(cellKey);\n      }\n    }\n    \n    // Animate the wall creation\n    incrementSteps();\n    updateWalls(new Set(walls));\n    updateMazeGeneration(new Set(mazeGenerationCells));\n    await sleep(animationSpeed);\n    \n    // Remove the wall cells from generation display after a short delay\n    setTimeout(() => {\n      newWallCells.forEach(cell => mazeGenerationCells.delete(cell));\n      updateMazeGeneration(new Set(mazeGenerationCells));\n    }, animationSpeed * 2);\n  }\n}\n\n\n\n/**\n * Sleep function for animation delays\n */\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Generate maze steps for step-by-step visualization (simplified version)\n */\nexport const getRecursiveDivisionSteps = (gridSize) => {\n  const steps = [];\n  const walls = new Set();\n  \n  // Initialize with border walls\n  for (let row = 0; row < gridSize; row++) {\n    for (let col = 0; col < gridSize; col++) {\n      if (row === 0 || row === gridSize - 1 || col === 0 || col === gridSize - 1) {\n        walls.add(`${row}-${col}`);\n      }\n    }\n  }\n  \n  steps.push({\n    walls: new Set(walls),\n    action: 'start',\n    description: 'Starting with border walls only'\n  });\n  \n  // This would contain the recursive division steps\n  // For now, return the initial step\n  return steps;\n};\n\nexport default generateMazeWithRecursiveDivision;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}