{"ast":null,"code":"var _jsxFileName = \"E:\\\\maze_analyser\\\\src\\\\components\\\\Matrix.js\";\nimport React from 'react';\nimport { PlayIcon, CheckCircleIcon } from '@heroicons/react/24/solid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Matrix = ({\n  gridSize = 20,\n  // Default value if not provided\n  startPos,\n  targetPos,\n  walls,\n  onCellClick,\n  onMouseDown,\n  onMouseEnter,\n  onMouseUp,\n  dragMode,\n  visitedCells = new Set(),\n  pathCells = new Set(),\n  mazeGenerationCells = new Set(),\n  isVisualizing = false\n}) => {\n  // Calculate cell type (empty, wall, start, or target)\n  const getCellType = (row, col) => {\n    if (row === startPos.row && col === startPos.col) return 'start';\n    if (row === targetPos.row && col === targetPos.col) return 'target';\n    if (walls.has(`${row}-${col}`)) return 'wall';\n    return 'empty';\n  };\n\n  // Get appropriate CSS class based on cell type\n  const getCellClass = (row, col) => {\n    const type = getCellType(row, col);\n    const cellKey = `${row}-${col}`;\n    let className = 'relative w-full h-full';\n    if (type === 'start') {\n      className += ' bg-emerald-500 shadow-emerald-500/50 shadow-inner';\n    } else if (type === 'target') {\n      className += ' bg-amber-500 shadow-amber-500/50 shadow-inner';\n    } else if (type === 'wall') {\n      className += ' bg-gray-600 shadow-gray-600/50 shadow-inner';\n    } else if (pathCells.has(cellKey)) {\n      // Path cells get a bright blue color with pulsing animation\n      className += ' bg-blue-500 shadow-blue-500/50 shadow-inner animate-pulse';\n    } else if (mazeGenerationCells.has(cellKey)) {\n      // Maze generation cells get an orange color with glow animation\n      className += ' bg-orange-500 shadow-orange-500/50 shadow-inner animate-pulse';\n    } else if (visitedCells.has(cellKey)) {\n      // Visited cells get a teal color with bubble animation\n      className += ' bg-teal-600 shadow-teal-600/50 shadow-inner';\n      // Add specific animation class for bubble effect\n      className += ' animate-bubble';\n    } else {\n      // Alternating colors for empty cells (chessboard pattern)\n      const isEven = (row + col) % 2 === 0;\n      className += isEven ? ' bg-[#2C3648]' : ' bg-[#1F2937]';\n    }\n    return className;\n  };\n\n  // Render the content of a cell (icons for start/target nodes)\n  const renderCellContent = (row, col) => {\n    const type = getCellType(row, col);\n    if (type === 'start') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute inset-0 flex items-center justify-center\",\n        children: /*#__PURE__*/_jsxDEV(PlayIcon, {\n          className: \"w-4 h-4 text-white drop-shadow-lg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this);\n    }\n    if (type === 'target') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute inset-0 flex items-center justify-center\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-2 w-2 bg-white rounded-full\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n\n  // Create all cells for the grid\n  const renderCells = () => {\n    const cells = [];\n    for (let row = 0; row < gridSize; row++) {\n      for (let col = 0; col < gridSize; col++) {\n        cells.push(/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${getCellClass(row, col)} ${dragMode && getCellType(row, col) === 'empty' ? 'hover:bg-blue-500/20' : ''}`,\n          onClick: () => onCellClick(row, col),\n          onMouseDown: () => onMouseDown(row, col),\n          onMouseEnter: () => onMouseEnter(row, col),\n          onMouseUp: onMouseUp,\n          onDragStart: e => e.preventDefault(),\n          style: {\n            cursor: getCellType(row, col) === 'start' || getCellType(row, col) === 'target' ? 'grab' : dragMode === 'start' || dragMode === 'target' ? 'grabbing' : 'pointer',\n            transition: 'all 0.1s ease',\n            transform: getCellType(row, col) === 'start' || getCellType(row, col) === 'target' ? 'scale(1.05)' : 'scale(1)'\n          },\n          children: renderCellContent(row, col)\n        }, `${row}-${col}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this));\n      }\n    }\n    return cells;\n  };\n\n  // Calculate cell size to fit the container while maintaining square cells\n  const cellSize = Math.min(16, Math.floor(600 / gridSize)); // Max 16px, but scale down for larger grids\n  const gridWidth = gridSize * cellSize + (gridSize - 1); // Add gap space\n  const gridHeight = gridWidth; // Keep it square\n\n  // Render the matrix\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex items-center justify-center w-full h-full p-4\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid gap-[1px] bg-gray-700 p-[1px] rounded-md overflow-hidden shadow-lg\",\n      style: {\n        gridTemplateColumns: `repeat(${gridSize}, ${cellSize}px)`,\n        gridTemplateRows: `repeat(${gridSize}, ${cellSize}px)`,\n        width: `${gridWidth}px`,\n        height: `${gridHeight}px`\n      },\n      children: renderCells()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_c = Matrix;\nexport default Matrix;\nvar _c;\n$RefreshReg$(_c, \"Matrix\");","map":{"version":3,"names":["React","PlayIcon","CheckCircleIcon","jsxDEV","_jsxDEV","Matrix","gridSize","startPos","targetPos","walls","onCellClick","onMouseDown","onMouseEnter","onMouseUp","dragMode","visitedCells","Set","pathCells","mazeGenerationCells","isVisualizing","getCellType","row","col","has","getCellClass","type","cellKey","className","isEven","renderCellContent","children","fileName","_jsxFileName","lineNumber","columnNumber","renderCells","cells","push","onClick","onDragStart","e","preventDefault","style","cursor","transition","transform","cellSize","Math","min","floor","gridWidth","gridHeight","gridTemplateColumns","gridTemplateRows","width","height","_c","$RefreshReg$"],"sources":["E:/maze_analyser/src/components/Matrix.js"],"sourcesContent":["import React from 'react';\nimport { PlayIcon, CheckCircleIcon } from '@heroicons/react/24/solid';\n\nconst Matrix = ({\n  gridSize = 20, // Default value if not provided\n  startPos,\n  targetPos,\n  walls,\n  onCellClick,\n  onMouseDown,\n  onMouseEnter,\n  onMouseUp,\n  dragMode,\n  visitedCells = new Set(),\n  pathCells = new Set(),\n  mazeGenerationCells = new Set(),\n  isVisualizing = false\n}) => {\n  // Calculate cell type (empty, wall, start, or target)\n  const getCellType = (row, col) => {\n    if (row === startPos.row && col === startPos.col) return 'start';\n    if (row === targetPos.row && col === targetPos.col) return 'target';\n    if (walls.has(`${row}-${col}`)) return 'wall';\n    return 'empty';\n  };\n\n  // Get appropriate CSS class based on cell type\n  const getCellClass = (row, col) => {\n    const type = getCellType(row, col);\n    const cellKey = `${row}-${col}`;\n    let className = 'relative w-full h-full';\n\n    if (type === 'start') {\n      className += ' bg-emerald-500 shadow-emerald-500/50 shadow-inner';\n    } else if (type === 'target') {\n      className += ' bg-amber-500 shadow-amber-500/50 shadow-inner';\n    } else if (type === 'wall') {\n      className += ' bg-gray-600 shadow-gray-600/50 shadow-inner';\n    } else if (pathCells.has(cellKey)) {\n      // Path cells get a bright blue color with pulsing animation\n      className += ' bg-blue-500 shadow-blue-500/50 shadow-inner animate-pulse';\n    } else if (mazeGenerationCells.has(cellKey)) {\n      // Maze generation cells get an orange color with glow animation\n      className += ' bg-orange-500 shadow-orange-500/50 shadow-inner animate-pulse';\n    } else if (visitedCells.has(cellKey)) {\n      // Visited cells get a teal color with bubble animation\n      className += ' bg-teal-600 shadow-teal-600/50 shadow-inner';\n      // Add specific animation class for bubble effect\n      className += ' animate-bubble';\n    } else {\n      // Alternating colors for empty cells (chessboard pattern)\n      const isEven = (row + col) % 2 === 0;\n      className += isEven ? ' bg-[#2C3648]' : ' bg-[#1F2937]';\n    }\n\n    return className;\n  };\n\n  // Render the content of a cell (icons for start/target nodes)\n  const renderCellContent = (row, col) => {\n    const type = getCellType(row, col);\n    if (type === 'start') {\n      return (\n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          <PlayIcon className=\"w-4 h-4 text-white drop-shadow-lg\" />\n        </div>\n      );\n    }\n    if (type === 'target') {\n      return (\n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-2 w-2 bg-white rounded-full\"></div>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  // Create all cells for the grid\n  const renderCells = () => {\n    const cells = [];\n    \n    for (let row = 0; row < gridSize; row++) {\n      for (let col = 0; col < gridSize; col++) {\n        cells.push(\n          <div\n            key={`${row}-${col}`}\n            className={`${getCellClass(row, col)} ${dragMode && getCellType(row, col) === 'empty' ? 'hover:bg-blue-500/20' : ''}`}\n            onClick={() => onCellClick(row, col)}\n            onMouseDown={() => onMouseDown(row, col)}\n            onMouseEnter={() => onMouseEnter(row, col)}\n            onMouseUp={onMouseUp}\n            onDragStart={(e) => e.preventDefault()}\n            style={{\n              cursor: getCellType(row, col) === 'start' || getCellType(row, col) === 'target' \n                ? 'grab' \n                : dragMode === 'start' || dragMode === 'target' ? 'grabbing' \n                : 'pointer',\n              transition: 'all 0.1s ease',\n              transform: getCellType(row, col) === 'start' || getCellType(row, col) === 'target' \n                ? 'scale(1.05)' \n                : 'scale(1)'\n            }}\n          >\n            {renderCellContent(row, col)}\n          </div>\n        );\n      }\n    }\n    \n    return cells;\n  };\n\n  // Calculate cell size to fit the container while maintaining square cells\n  const cellSize = Math.min(16, Math.floor(600 / gridSize)); // Max 16px, but scale down for larger grids\n  const gridWidth = gridSize * cellSize + (gridSize - 1); // Add gap space\n  const gridHeight = gridWidth; // Keep it square\n\n  // Render the matrix\n  return (\n    <div className=\"flex items-center justify-center w-full h-full p-4\">\n      <div \n        className=\"grid gap-[1px] bg-gray-700 p-[1px] rounded-md overflow-hidden shadow-lg\"\n        style={{ \n          gridTemplateColumns: `repeat(${gridSize}, ${cellSize}px)`,\n          gridTemplateRows: `repeat(${gridSize}, ${cellSize}px)`,\n          width: `${gridWidth}px`,\n          height: `${gridHeight}px`\n        }}\n      >\n        {renderCells()}\n      </div>\n    </div>\n  );\n};\n\nexport default Matrix;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}