{"ast":null,"code":"var _jsxFileName = \"E:\\\\maze_analyser\\\\src\\\\components\\\\Matrix.js\";\nimport React from 'react';\nimport { PlayIcon, FlagIcon } from '@heroicons/react/24/solid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Matrix = ({\n  rows,\n  cols,\n  startPos,\n  targetPos,\n  walls,\n  onCellClick,\n  onMouseDown,\n  onMouseEnter,\n  onMouseUp,\n  dragMode,\n  visitedNodes = [],\n  pathNodes = [],\n  isRunning = false\n}) => {\n  // Calculate cell type (empty, wall, start, or target)\n  const getCellType = (row, col) => {\n    if (row === startPos.row && col === startPos.col) return 'start';\n    if (row === targetPos.row && col === targetPos.col) return 'target';\n    if (walls.has(`${row}-${col}`)) return 'wall';\n\n    // Check if this cell is part of the final path\n    if (pathNodes.some(node => node.row === row && node.col === col)) {\n      return 'path';\n    }\n\n    // Check if this cell was visited during algorithm execution\n    if (visitedNodes.some(node => node.row === row && node.col === col)) {\n      return 'visited';\n    }\n    return 'empty';\n  };\n\n  // Get appropriate CSS class based on cell type\n  const getCellClass = (row, col) => {\n    const type = getCellType(row, col);\n    let className = 'relative w-full h-full';\n    if (type === 'start') className += ' bg-emerald-500 shadow-emerald-500/50 shadow-inner';else if (type === 'target') className += ' bg-amber-500 shadow-amber-500/50 shadow-inner';else if (type === 'wall') className += ' bg-gray-600 shadow-gray-600/50 shadow-inner';else {\n      // Alternating colors for empty cells (chessboard pattern)\n      const isEven = (row + col) % 2 === 0;\n      className += isEven ? ' bg-[#2C3648]' : ' bg-[#1F2937]';\n    }\n    return className;\n  };\n\n  // Render the content of a cell (icons for start/target nodes)\n  const renderCellContent = (row, col) => {\n    const type = getCellType(row, col);\n    if (type === 'start') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute inset-0 flex items-center justify-center\",\n        children: /*#__PURE__*/_jsxDEV(PlayIcon, {\n          className: \"w-4 h-4 text-white drop-shadow-lg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this);\n    }\n    if (type === 'target') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute inset-0 flex items-center justify-center\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-2 w-2 bg-white rounded-full\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n\n  // Create all cells for the grid\n  const renderCells = () => {\n    const cells = [];\n    for (let row = 0; row < gridSize; row++) {\n      for (let col = 0; col < gridSize; col++) {\n        cells.push(/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${getCellClass(row, col)} ${dragMode && getCellType(row, col) === 'empty' ? 'hover:bg-blue-500/20' : ''}`,\n          onClick: () => onCellClick(row, col),\n          onMouseDown: () => onMouseDown(row, col),\n          onMouseEnter: () => onMouseEnter(row, col),\n          onMouseUp: onMouseUp,\n          onDragStart: e => e.preventDefault(),\n          style: {\n            cursor: getCellType(row, col) === 'start' || getCellType(row, col) === 'target' ? 'grab' : dragMode ? 'crosshair' : 'pointer'\n          },\n          children: renderCellContent(row, col)\n        }, `${row}-${col}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this));\n      }\n    }\n    return cells;\n  };\n\n  // Render the matrix\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid gap-[1px] bg-gray-700 p-[1px] rounded-md overflow-hidden shadow-lg w-full h-full\",\n    style: {\n      gridTemplateColumns: `repeat(${gridSize}, minmax(0, 1fr))`,\n      gridTemplateRows: `repeat(${gridSize}, minmax(0, 1fr))`,\n      aspectRatio: '1/1',\n      width: '100%',\n      height: '100%',\n      maxHeight: '100%'\n    },\n    children: renderCells()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_c = Matrix;\nexport default Matrix;\nvar _c;\n$RefreshReg$(_c, \"Matrix\");","map":{"version":3,"names":["React","PlayIcon","FlagIcon","jsxDEV","_jsxDEV","Matrix","rows","cols","startPos","targetPos","walls","onCellClick","onMouseDown","onMouseEnter","onMouseUp","dragMode","visitedNodes","pathNodes","isRunning","getCellType","row","col","has","some","node","getCellClass","type","className","isEven","renderCellContent","children","fileName","_jsxFileName","lineNumber","columnNumber","renderCells","cells","gridSize","push","onClick","onDragStart","e","preventDefault","style","cursor","gridTemplateColumns","gridTemplateRows","aspectRatio","width","height","maxHeight","_c","$RefreshReg$"],"sources":["E:/maze_analyser/src/components/Matrix.js"],"sourcesContent":["import React from 'react';\nimport { PlayIcon, FlagIcon } from '@heroicons/react/24/solid';\n\nconst Matrix = ({\n  rows, \n  cols, \n  startPos, \n  targetPos, \n  walls, \n  onCellClick, \n  onMouseDown, \n  onMouseEnter, \n  onMouseUp, \n  dragMode,\n  visitedNodes = [],\n  pathNodes = [],\n  isRunning = false\n}) => {\n  // Calculate cell type (empty, wall, start, or target)\n  const getCellType = (row, col) => {\n    if (row === startPos.row && col === startPos.col) return 'start';\n    if (row === targetPos.row && col === targetPos.col) return 'target';\n    if (walls.has(`${row}-${col}`)) return 'wall';\n    \n    // Check if this cell is part of the final path\n    if (pathNodes.some(node => node.row === row && node.col === col)) {\n      return 'path';\n    }\n    \n    // Check if this cell was visited during algorithm execution\n    if (visitedNodes.some(node => node.row === row && node.col === col)) {\n      return 'visited';\n    }\n    \n    return 'empty';\n  };\n\n  // Get appropriate CSS class based on cell type\n  const getCellClass = (row, col) => {\n    const type = getCellType(row, col);\n    let className = 'relative w-full h-full';\n\n    if (type === 'start') className += ' bg-emerald-500 shadow-emerald-500/50 shadow-inner';\n    else if (type === 'target') className += ' bg-amber-500 shadow-amber-500/50 shadow-inner';\n    else if (type === 'wall') className += ' bg-gray-600 shadow-gray-600/50 shadow-inner';\n    else {\n      // Alternating colors for empty cells (chessboard pattern)\n      const isEven = (row + col) % 2 === 0;\n      className += isEven ? ' bg-[#2C3648]' : ' bg-[#1F2937]';\n    }\n\n    return className;\n  };\n\n  // Render the content of a cell (icons for start/target nodes)\n  const renderCellContent = (row, col) => {\n    const type = getCellType(row, col);\n    if (type === 'start') {\n      return (\n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          <PlayIcon className=\"w-4 h-4 text-white drop-shadow-lg\" />\n        </div>\n      );\n    }\n    if (type === 'target') {\n      return (\n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-2 w-2 bg-white rounded-full\"></div>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  // Create all cells for the grid\n  const renderCells = () => {\n    const cells = [];\n    \n    for (let row = 0; row < gridSize; row++) {\n      for (let col = 0; col < gridSize; col++) {\n        cells.push(\n          <div\n            key={`${row}-${col}`}\n            className={`${getCellClass(row, col)} ${dragMode && getCellType(row, col) === 'empty' ? 'hover:bg-blue-500/20' : ''}`}\n            onClick={() => onCellClick(row, col)}\n            onMouseDown={() => onMouseDown(row, col)}\n            onMouseEnter={() => onMouseEnter(row, col)}\n            onMouseUp={onMouseUp}\n            onDragStart={(e) => e.preventDefault()}\n            style={{\n              cursor: getCellType(row, col) === 'start' || getCellType(row, col) === 'target' \n                ? 'grab' \n                : dragMode ? 'crosshair' : 'pointer'\n            }}\n          >\n            {renderCellContent(row, col)}\n          </div>\n        );\n      }\n    }\n    \n    return cells;\n  };\n\n  // Render the matrix\n  return (\n    <div \n      className=\"grid gap-[1px] bg-gray-700 p-[1px] rounded-md overflow-hidden shadow-lg w-full h-full\"\n      style={{ \n        gridTemplateColumns: `repeat(${gridSize}, minmax(0, 1fr))`,\n        gridTemplateRows: `repeat(${gridSize}, minmax(0, 1fr))`,\n        aspectRatio: '1/1',\n        width: '100%',\n        height: '100%',\n        maxHeight: '100%'\n      }}\n    >\n      {renderCells()}\n    </div>\n  );\n};\n\nexport default Matrix;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}