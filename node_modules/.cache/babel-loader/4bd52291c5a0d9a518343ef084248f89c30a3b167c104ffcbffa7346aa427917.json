{"ast":null,"code":"/**\n * Breadth-First Search (BFS) Algorithm Implementation\n * \n * This algorithm explores the grid layer by layer, starting from the start node\n * and expanding outward until it finds the target node or exhausts all possibilities.\n * \n * BFS guarantees the shortest path in an unweighted graph.\n */\n\n/**\n * Implements the Breadth-First Search algorithm to find the shortest path\n * @param {number} gridSize - The size of the grid (gridSize x gridSize)\n * @param {Object} startPos - The starting position {row, col}\n * @param {Object} targetPos - The target position {row, col}\n * @param {Set} walls - Set of wall positions in \"row-col\" format\n * @param {Function} updateVisited - Callback to update UI with visited cells\n * @param {Function} updatePath - Callback to update UI with final path\n * @returns {Object} - Results including whether path was found, path, visited nodes count\n */\nexport const breadthFirstSearch = async (gridSize, startPos, targetPos, walls, updateVisited, updatePath) => {\n  // Data structures needed for BFS\n  const queue = []; // Queue for BFS traversal\n  const visited = new Set(); // Track visited cells\n  const parent = new Map(); // Track the path to reconstruct later\n  let pathFound = false;\n  let visitedCount = 0;\n\n  // Convert positions to string format for easy comparison\n  const startPosStr = `${startPos.row}-${startPos.col}`;\n  const targetPosStr = `${targetPos.row}-${targetPos.col}`;\n\n  // Initialize BFS with the start position\n  queue.push(startPosStr);\n  visited.add(startPosStr);\n\n  // Define the four possible directions: up, right, down, left\n  const directions = [[-1, 0],\n  // up\n  [0, 1],\n  // right\n  [1, 0],\n  // down\n  [0, -1] // left\n  ];\n\n  // Simulate async delay for visualization\n  const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n  // BFS main loop\n  while (queue.length > 0) {\n    const current = queue.shift(); // Dequeue the front cell\n    const [currentRow, currentCol] = current.split('-').map(Number);\n    visitedCount++;\n\n    // Check if we've reached the target\n    if (current === targetPosStr) {\n      pathFound = true;\n      break;\n    }\n\n    // Update UI to show the current cell as visited\n    if (updateVisited && current !== startPosStr) {\n      updateVisited(currentRow, currentCol);\n      await delay(10); // Small delay for visualization\n    }\n\n    // Explore all four directions\n    for (const [dx, dy] of directions) {\n      const newRow = currentRow + dx;\n      const newCol = currentCol + dy;\n\n      // Check if the new position is valid\n      if (newRow >= 0 && newRow < gridSize && newCol >= 0 && newCol < gridSize) {\n        const newPos = `${newRow}-${newCol}`;\n\n        // Check if the new position is not a wall and not visited yet\n        if (!walls.has(newPos) && !visited.has(newPos)) {\n          queue.push(newPos);\n          visited.add(newPos);\n          parent.set(newPos, current); // Track the parent for path reconstruction\n        }\n      }\n    }\n  }\n\n  // Reconstruct the path if target was found\n  const path = [];\n  if (pathFound) {\n    let current = targetPosStr;\n\n    // Work backward from target to start\n    while (current !== startPosStr) {\n      const [row, col] = current.split('-').map(Number);\n      path.unshift({\n        row,\n        col\n      }); // Add to the beginning of the path array\n      current = parent.get(current);\n    }\n\n    // Update UI with the final path\n    if (updatePath) {\n      for (const {\n        row,\n        col\n      } of path) {\n        updatePath(row, col);\n        await delay(50); // Slightly longer delay for path visualization\n      }\n    }\n  }\n\n  // Return the results\n  return {\n    pathFound,\n    path,\n    visitedCount,\n    pathLength: path.length\n  };\n};\n\n/**\n * Helper function to visualize BFS step by step\n * This is a simpler version that returns all the steps for visualization\n */\nexport const getBFSSteps = (gridSize, startPos, targetPos, walls) => {\n  const steps = [];\n  const queue = [];\n  const visited = new Set();\n  const parent = new Map();\n  const startPosStr = `${startPos.row}-${startPos.col}`;\n  const targetPosStr = `${targetPos.row}-${targetPos.col}`;\n  queue.push(startPosStr);\n  visited.add(startPosStr);\n  steps.push({\n    type: 'visit',\n    position: startPosStr\n  });\n  const directions = [[-1, 0], [0, 1], [1, 0], [0, -1]];\n  let pathFound = false;\n  while (queue.length > 0) {\n    const current = queue.shift();\n    if (current === targetPosStr) {\n      pathFound = true;\n      break;\n    }\n    const [currentRow, currentCol] = current.split('-').map(Number);\n    for (const [dx, dy] of directions) {\n      const newRow = currentRow + dx;\n      const newCol = currentCol + dy;\n      if (newRow >= 0 && newRow < gridSize && newCol >= 0 && newCol < gridSize) {\n        const newPos = `${newRow}-${newCol}`;\n        if (!walls.has(newPos) && !visited.has(newPos)) {\n          queue.push(newPos);\n          visited.add(newPos);\n          parent.set(newPos, current);\n          steps.push({\n            type: 'visit',\n            position: newPos\n          });\n        }\n      }\n    }\n  }\n\n  // Reconstruct path if found\n  if (pathFound) {\n    const path = [];\n    let current = targetPosStr;\n    while (current !== startPosStr) {\n      path.unshift(current);\n      steps.push({\n        type: 'path',\n        position: current\n      });\n      current = parent.get(current);\n    }\n  }\n  return {\n    steps,\n    pathFound,\n    visitedCount: visited.size - 1 // Don't count start node\n  };\n};\nexport default breadthFirstSearch;","map":{"version":3,"names":["breadthFirstSearch","gridSize","startPos","targetPos","walls","updateVisited","updatePath","queue","visited","Set","parent","Map","pathFound","visitedCount","startPosStr","row","col","targetPosStr","push","add","directions","delay","ms","Promise","resolve","setTimeout","length","current","shift","currentRow","currentCol","split","map","Number","dx","dy","newRow","newCol","newPos","has","set","path","unshift","get","pathLength","getBFSSteps","steps","type","position","size"],"sources":["E:/maze_analyser/src/algorithms/breadthFirstSearch.js"],"sourcesContent":["/**\n * Breadth-First Search (BFS) Algorithm Implementation\n * \n * This algorithm explores the grid layer by layer, starting from the start node\n * and expanding outward until it finds the target node or exhausts all possibilities.\n * \n * BFS guarantees the shortest path in an unweighted graph.\n */\n\n/**\n * Implements the Breadth-First Search algorithm to find the shortest path\n * @param {number} gridSize - The size of the grid (gridSize x gridSize)\n * @param {Object} startPos - The starting position {row, col}\n * @param {Object} targetPos - The target position {row, col}\n * @param {Set} walls - Set of wall positions in \"row-col\" format\n * @param {Function} updateVisited - Callback to update UI with visited cells\n * @param {Function} updatePath - Callback to update UI with final path\n * @returns {Object} - Results including whether path was found, path, visited nodes count\n */\nexport const breadthFirstSearch = async (\n  gridSize,\n  startPos,\n  targetPos,\n  walls,\n  updateVisited,\n  updatePath\n) => {\n  // Data structures needed for BFS\n  const queue = []; // Queue for BFS traversal\n  const visited = new Set(); // Track visited cells\n  const parent = new Map(); // Track the path to reconstruct later\n  let pathFound = false;\n  let visitedCount = 0;\n  \n  // Convert positions to string format for easy comparison\n  const startPosStr = `${startPos.row}-${startPos.col}`;\n  const targetPosStr = `${targetPos.row}-${targetPos.col}`;\n  \n  // Initialize BFS with the start position\n  queue.push(startPosStr);\n  visited.add(startPosStr);\n  \n  // Define the four possible directions: up, right, down, left\n  const directions = [\n    [-1, 0],  // up\n    [0, 1],   // right\n    [1, 0],   // down\n    [0, -1]   // left\n  ];\n  \n  // Simulate async delay for visualization\n  const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n  \n  // BFS main loop\n  while (queue.length > 0) {\n    const current = queue.shift(); // Dequeue the front cell\n    const [currentRow, currentCol] = current.split('-').map(Number);\n    visitedCount++;\n    \n    // Check if we've reached the target\n    if (current === targetPosStr) {\n      pathFound = true;\n      break;\n    }\n    \n    // Update UI to show the current cell as visited\n    if (updateVisited && current !== startPosStr) {\n      updateVisited(currentRow, currentCol);\n      await delay(10); // Small delay for visualization\n    }\n    \n    // Explore all four directions\n    for (const [dx, dy] of directions) {\n      const newRow = currentRow + dx;\n      const newCol = currentCol + dy;\n      \n      // Check if the new position is valid\n      if (\n        newRow >= 0 && newRow < gridSize && \n        newCol >= 0 && newCol < gridSize\n      ) {\n        const newPos = `${newRow}-${newCol}`;\n        \n        // Check if the new position is not a wall and not visited yet\n        if (!walls.has(newPos) && !visited.has(newPos)) {\n          queue.push(newPos);\n          visited.add(newPos);\n          parent.set(newPos, current); // Track the parent for path reconstruction\n        }\n      }\n    }\n  }\n  \n  // Reconstruct the path if target was found\n  const path = [];\n  if (pathFound) {\n    let current = targetPosStr;\n    \n    // Work backward from target to start\n    while (current !== startPosStr) {\n      const [row, col] = current.split('-').map(Number);\n      path.unshift({ row, col }); // Add to the beginning of the path array\n      current = parent.get(current);\n    }\n    \n    // Update UI with the final path\n    if (updatePath) {\n      for (const { row, col } of path) {\n        updatePath(row, col);\n        await delay(50); // Slightly longer delay for path visualization\n      }\n    }\n  }\n  \n  // Return the results\n  return {\n    pathFound,\n    path,\n    visitedCount,\n    pathLength: path.length\n  };\n};\n\n/**\n * Helper function to visualize BFS step by step\n * This is a simpler version that returns all the steps for visualization\n */\nexport const getBFSSteps = (gridSize, startPos, targetPos, walls) => {\n  const steps = [];\n  const queue = [];\n  const visited = new Set();\n  const parent = new Map();\n  \n  const startPosStr = `${startPos.row}-${startPos.col}`;\n  const targetPosStr = `${targetPos.row}-${targetPos.col}`;\n  \n  queue.push(startPosStr);\n  visited.add(startPosStr);\n  steps.push({ type: 'visit', position: startPosStr });\n  \n  const directions = [[-1, 0], [0, 1], [1, 0], [0, -1]];\n  let pathFound = false;\n  \n  while (queue.length > 0) {\n    const current = queue.shift();\n    \n    if (current === targetPosStr) {\n      pathFound = true;\n      break;\n    }\n    \n    const [currentRow, currentCol] = current.split('-').map(Number);\n    \n    for (const [dx, dy] of directions) {\n      const newRow = currentRow + dx;\n      const newCol = currentCol + dy;\n      \n      if (\n        newRow >= 0 && newRow < gridSize && \n        newCol >= 0 && newCol < gridSize\n      ) {\n        const newPos = `${newRow}-${newCol}`;\n        \n        if (!walls.has(newPos) && !visited.has(newPos)) {\n          queue.push(newPos);\n          visited.add(newPos);\n          parent.set(newPos, current);\n          steps.push({ type: 'visit', position: newPos });\n        }\n      }\n    }\n  }\n  \n  // Reconstruct path if found\n  if (pathFound) {\n    const path = [];\n    let current = targetPosStr;\n    \n    while (current !== startPosStr) {\n      path.unshift(current);\n      steps.push({ type: 'path', position: current });\n      current = parent.get(current);\n    }\n  }\n  \n  return {\n    steps,\n    pathFound,\n    visitedCount: visited.size - 1 // Don't count start node\n  };\n};\n\nexport default breadthFirstSearch;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}